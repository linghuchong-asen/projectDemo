import{_ as p,V as _,W as b,$ as n,a0 as a,X as e,Y as t,Z as s,D as d}from"./framework-13182686.js";const f={},y=s('<h1 id="视窗-viewer" tabindex="-1"><a class="header-anchor" href="#视窗-viewer" aria-hidden="true">#</a> 视窗(Viewer)</h1><p>视窗是承载应用的基本部件。创建一个Viewer实例即创建一个场景窗口。</p><h2 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器" aria-hidden="true">#</a> 构造器</h2><p><strong>Viewer(containerId,options)</strong></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>container</code></td><td style="text-align:left;">Element | String</td><td style="text-align:left;">将容纳Viewer的HTML DOM 元素或ID。</td></tr></tbody></table><h2 id="代码实例" tabindex="-1"><a class="header-anchor" href="#代码实例" aria-hidden="true">#</a> 代码实例</h2>',6),m=e("div",{class:"language-html line-numbers-mode","data-ext":"html"},[e("pre",{class:"language-html"},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("div")]),t(),e("span",{class:"token attr-name"},"id"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),t("containerId"),e("span",{class:"token punctuation"},'"')]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("div")]),e("span",{class:"token punctuation"},">")]),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),g=e("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[e("pre",{class:"language-typescript"},[e("code",null,[e("span",{class:"token keyword"},"const"),t(" viewer "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"WebGis"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"Viewer"),e("span",{class:"token punctuation"},"("),t("containerId"),e("span",{class:"token punctuation"},")"),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),x=e("h2",{id:"属性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#属性","aria-hidden":"true"},"#"),t(" 属性")],-1),v={id:"axes-boolean",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#axes-boolean","aria-hidden":"true"},"#",-1),w=e("p",null,"🚩",-1),j=e("p",null,"是否显示坐标轴。",-1),P={id:"axeslength-number",tabindex:"-1"},D=e("a",{class:"header-anchor",href:"#axeslength-number","aria-hidden":"true"},"#",-1),V=e("p",null,"🚩",-1),B=e("p",null,"坐标轴长度，默认为10。",-1),I={id:"container-element",tabindex:"-1"},N=e("a",{class:"header-anchor",href:"#container-element","aria-hidden":"true"},"#",-1),S=e("p",null,"🚩",-1),E=e("p",null,"获取父容器。",-1),A={id:"entities-entitygroup",tabindex:"-1"},T=e("a",{class:"header-anchor",href:"#entities-entitygroup","aria-hidden":"true"},"#",-1),C=s('<p>🚩</p><p>获取未关联到特定数据源的实体集合</p><h3 id="fullscreenbutton-fullscreenbutton" tabindex="-1"><a class="header-anchor" href="#fullscreenbutton-fullscreenbutton" aria-hidden="true">#</a> <a href="">fullscreenButton : FullscreenButton</a></h3><p><code>readonly</code></p><p>获取全屏按钮（FullscreenButton）。</p><h3 id="homebutton-homebutton" tabindex="-1"><a class="header-anchor" href="#homebutton-homebutton" aria-hidden="true">#</a> <a href="">homeButton : HomeButton</a></h3><p><code>readonly</code></p><p>获取主画面按钮（HomeButton）。</p><h3 id="infobox-infobox" tabindex="-1"><a class="header-anchor" href="#infobox-infobox" aria-hidden="true">#</a> <a href="">infoBox : InfoBox</a></h3><p><code>readonly</code></p><p>获取消息盒（InfoBox）。</p><h3 id="navigationhelpbutton-navigationhelpbutton" tabindex="-1"><a class="header-anchor" href="#navigationhelpbutton-navigationhelpbutton" aria-hidden="true">#</a> <a href="">navigationHelpButton : NavigationHelpButton</a></h3><p><code>readonly</code></p><p>获取导航帮助按钮（NavigationHelpButton）。</p><h3 id="postprocessstages-postprocessstagecollection" tabindex="-1"><a class="header-anchor" href="#postprocessstages-postprocessstagecollection" aria-hidden="true">#</a> <a href="">postProcessStages : PostProcessStageCollection</a></h3><p><code>readonly</code></p><p>获取后处理阶段集合（PostProcessStageCollection）。</p><h3 id="resolutionscale-number" tabindex="-1"><a class="header-anchor" href="#resolutionscale-number" aria-hidden="true">#</a> <a href="">resolutionScale : Number</a></h3><p>获取或设置渲染分辨率的比例因子。 小于1.0的值可以在功能较弱的设备上提高性能，而大于1.0的值将以更高的分辨率渲染，然后缩小比例，从而提高视觉保真度。 例如，如果部件的大小为640x480，将该值设置为0.5将导致场景以320x240的大小呈现，然后按比例放大， 而将其设置为2.0将导致场景以1280x960的大小呈现，然后按比例缩小。</p>',19),R={id:"scene-scene",tabindex:"-1"},z=e("a",{class:"header-anchor",href:"#scene-scene","aria-hidden":"true"},"#",-1),H=s('<p>🚩</p><p><code>readonly</code></p><p>获取场景Scene。</p><h3 id="selectedentity-entity" tabindex="-1"><a class="header-anchor" href="#selectedentity-entity" aria-hidden="true">#</a> <a href="">selectedEntity : Entity</a></h3><p>获取或设置要为其显示选择指示符的对象实例。</p><h3 id="selectedentitychanged-event" tabindex="-1"><a class="header-anchor" href="#selectedentitychanged-event" aria-hidden="true">#</a> <a href="">selectedEntityChanged : Event</a></h3><p><code>readonly</code></p><p>获取所选实体更改时引发的事件。</p><h3 id="selectionindicator-selectionindicator" tabindex="-1"><a class="header-anchor" href="#selectionindicator-selectionindicator" aria-hidden="true">#</a> <a href="">selectionIndicator : SelectionIndicator</a></h3><p><code>readonly</code></p><p>获取选择指示器（SelectionIndicator）。</p><h3 id="shadows-boolean" tabindex="-1"><a class="header-anchor" href="#shadows-boolean" aria-hidden="true">#</a> <strong><a href="">shadows : Boolean</a></strong></h3><p>确定阴影是否由点光源投射形成。</p><h3 id="trackedentity-entity" tabindex="-1"><a class="header-anchor" href="#trackedentity-entity" aria-hidden="true">#</a> <a href="">trackedEntity : Entity</a></h3><p>获取或设置相机当前跟踪的实体实例。</p><h3 id="trackedentitychanged-event" tabindex="-1"><a class="header-anchor" href="#trackedentitychanged-event" aria-hidden="true">#</a> <a href="">trackedEntityChanged : Event</a></h3><p><code>readonly</code></p><p>获取被跟踪实体更改时引发的事件。</p><h3 id="usebrowserrecommendedresolution-boolean" tabindex="-1"><a class="header-anchor" href="#usebrowserrecommendedresolution-boolean" aria-hidden="true">#</a> <a href="">useBrowserRecommendedResolution : Boolean</a></h3>',19),O={href:"https://www.vvpstk.com/public/Cesium/Documentation/Viewer.html#resolutionScale",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,"Viewer#resolutionScale",-1),F=e("h3",{id:"usedefaultrenderloop-boolean",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#usedefaultrenderloop-boolean","aria-hidden":"true"},"#"),t(),e("a",{href:""},"useDefaultRenderLoop : Boolean")],-1),q={href:"https://www.vvpstk.com/public/Cesium/Documentation/requestAnimationFrame.html",target:"_blank",rel:"noopener noreferrer"},G=e("code",null,"requestAnimationFrame",-1),M=e("code",null,"resize",-1),W=e("code",null,"render",-1),X={href:"https://www.vvpstk.com/public/Cesium/Documentation/Scene.html",target:"_blank",rel:"noopener noreferrer"},Y=e("code",null,"Scene",-1),Z=e("code",null,"renderError",-1),$=s('<h3 id="vrbutton-vrbutton" tabindex="-1"><a class="header-anchor" href="#vrbutton-vrbutton" aria-hidden="true">#</a> <a href="">vrButton : VRButton</a></h3><p><code>readonly</code></p><p>获取VRButton。</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><h3 id="destroy" tabindex="-1"><a class="header-anchor" href="#destroy" aria-hidden="true">#</a> <a href="">destroy()</a></h3><p>销毁部件。如果从布局中永久删除viewer部件，则应调用。</p>',6),J={id:"drillpick-windowposition-objects-recursive-array-object",tabindex:"-1"},K=e("a",{class:"header-anchor",href:"#drillpick-windowposition-objects-recursive-array-object","aria-hidden":"true"},"#",-1),Q=e("p",null,"🚩",-1),U=e("thead",null,[e("tr",null,[e("th",null,"Name"),e("th",null,"Type"),e("th",null,"Description")])],-1),ee=e("td",null,"windowPosition",-1),te=e("td",null,"屏幕坐标。",-1),ne=e("td",null,"object",-1),ae=e("td",null,"检测与射线相交的一组物体。",-1),oe=e("td",null,"recursive",-1),se=e("td",null,[e("code",null,"optional"),t("若为true，则同时也会检查所有的后代。"),e("br"),t("否则将只会检查对象本身。默认值为true。")],-1),ie=s(`<p>从相机位置到windowPosition做一条射线，检测所有在射线与这些物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个）。</p><p>该方法返回一个包含有交叉部分的数组:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span> <span class="token punctuation">{</span> distance<span class="token punctuation">,</span> point<span class="token punctuation">,</span> object <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>distance: number —— 射线投射原点和相交部分之间的距离。</p></li><li><p>point: Vector3 —— 相交部分的点（世界坐标）。</p></li><li><p>object: Object3D —— 相交的物体。</p></li></ul><h3 id="isdestroyed-boolean" tabindex="-1"><a class="header-anchor" href="#isdestroyed-boolean" aria-hidden="true">#</a> <a href="">isDestroyed(): Boolean</a></h3><p><strong>返回值</strong>: 如果对象已被销毁，则为true，否则为false。</p><h3 id="flyto-target-options-promise-boolean" tabindex="-1"><a class="header-anchor" href="#flyto-target-options-promise-boolean" aria-hidden="true">#</a> <a href="">flyTo (target, options ): Promise&lt;boolean&gt;</a></h3><p>相机定位到指定实体或者图元处，相机移动过程有一个动画效果。</p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>target</code></td><td style="text-align:left;">Entity</td><td style="text-align:left;">要查看的实体。</td></tr></tbody></table><p>对象，具有以下属性：</p>`,10),le=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Default"),e("th",{style:{"text-align":"left"}},"Description")])],-1),de=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"duration")]),e("td",{style:{"text-align":"left"}},"Number"),e("td",{style:{"text-align":"left"}},[e("code",null,"3.0")]),e("td",{style:{"text-align":"left"}},[e("code",null,"optional"),t("飞行时间以秒为单位。")])],-1),re=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"maximumHeight")]),e("td",{style:{"text-align":"left"}},"Number"),e("td",{style:{"text-align":"left"}}),e("td",{style:{"text-align":"left"}},[e("code",null,"optional"),t("飞行中的最高高度。")])],-1),ce=e("td",{style:{"text-align":"left"}},[e("code",null,"offset")],-1),he={style:{"text-align":"left"}},ue={href:"https://www.vvpstk.com/public/Cesium/Documentation/HeadingPitchRange.html",target:"_blank",rel:"noopener noreferrer"},pe=e("td",{style:{"text-align":"left"}},null,-1),_e=e("td",{style:{"text-align":"left"}},[e("code",null,"optional"),t("在当地的东北向上（east-north-up）参考系中从目标到以目标为中心的偏移量。")],-1),be=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"scale")]),e("td",{style:{"text-align":"left"}},"boolean"),e("td",{style:{"text-align":"left"}},"false"),e("td",{style:{"text-align":"left"}},[e("code",null,"optional"),t("是否支持缩放")])],-1),fe=s('<p><strong>返回值</strong>：飞行成功时，promise被解析为true；如果实体未在场景中可视化或飞行取消，promise被解析为false。</p><h3 id="flyto-position-options" tabindex="-1"><a class="header-anchor" href="#flyto-position-options" aria-hidden="true">#</a> flyTo(position,options)</h3><h3 id="forceresize" tabindex="-1"><a class="header-anchor" href="#forceresize" aria-hidden="true">#</a> <a href="">forceResize()</a></h3><p>这迫使部件重新考虑它的布局，包括部件大小和版权的放置。</p>',4),ye={id:"getprimitivebyname-name-object3d",tabindex:"-1"},me=e("a",{class:"header-anchor",href:"#getprimitivebyname-name-object3d","aria-hidden":"true"},"#",-1),ge=s("<p>🚩</p><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>要获取的图元的名称。</td></tr></tbody></table><p>根据图元的名称获取图元。若未找到则返回<code>undefined</code>。</p><p>请注意，大多数的图元中name默认是一个空字符串，要使用这个方法，你将需要手动地设置name属性。</p>",4),xe={id:"pick-windowposition-object-recursive-array",tabindex:"-1"},ve=e("a",{class:"header-anchor",href:"#pick-windowposition-object-recursive-array","aria-hidden":"true"},"#",-1),ke=e("p",null,"🚩",-1),we=e("thead",null,[e("tr",null,[e("th",null,"Name"),e("th",null,"Type"),e("th",null,"Description")])],-1),je=e("td",null,"windowPosition",-1),Pe=e("td",null,"屏幕坐标。",-1),De=e("td",null,"object",-1),Ve=e("td",null,"检测与射线相交的物体。",-1),Be=e("td",null,"recursive",-1),Ie=e("td",null,[e("code",null,"optional"),t("若为true，则同时也会检查所有的后代。"),e("br"),t("否则将只会检查对象本身。默认值为true。")],-1),Ne=s(`<p>从相机位置到windowPosition做一条射线，检测是否与object相交。</p><p>检测所有在射线与物体之间，包括或不包括后代的相交部分。返回结果时，相交部分将按距离进行排序，最近的位于第一个。 该方法返回一个包含有交叉部分的数组:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span> <span class="token punctuation">{</span> distance<span class="token punctuation">,</span> point<span class="token punctuation">,</span> object <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>distance: number —— 射线投射原点和相交部分之间的距离。</p></li><li><p>point: Vector3 —— 相交部分的点（世界坐标）。</p></li><li><p>object: Object3D —— 相交的物体。</p></li></ul>`,4),Se={id:"pickposition-windowposition-vector3-undefined",tabindex:"-1"},Ee=e("a",{class:"header-anchor",href:"#pickposition-windowposition-vector3-undefined","aria-hidden":"true"},"#",-1),Ae=e("p",null,"🚩",-1),Te=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),Ce=e("td",{style:{"text-align":"left"}},[e("code",null,"windowPosition")],-1),Re={style:{"text-align":"left"}},ze=e("td",{style:{"text-align":"left"}},"屏幕坐标。",-1),He=s('<p>从相机到屏幕坐标做一条射线，拾取场景中物体上的点。</p><p>返回相交点的世界坐标；若没有交点返回<code>undefined</code>。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>要使用此方法，必须给要拾取点的物体赋值<code>name</code>属性。</p></div><h3 id="resize" tabindex="-1"><a class="header-anchor" href="#resize" aria-hidden="true">#</a> <a href="">resize()</a></h3><p>调整部件的大小以匹配容器的大小。 除非<code>useDefaultRenderLoop</code>被设置为false，否则将根据需要自动调用此函数。</p><h3 id="setskybox-source-show" tabindex="-1"><a class="header-anchor" href="#setskybox-source-show" aria-hidden="true">#</a> setSkyBox(source,show)</h3><p>🚩</p><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>source</td><td>{<br>   px:string<br>   mx:string<br>   py:string<br>   my:string<br>   pz:string<br>   mz:string<br>}</td><td>天空盒纹理贴图，<br>传入前后、左右、上下六个面的纹理图片路径。</td></tr><tr><td>show</td><td>boolean</td><td>是否显示天空盒。</td></tr></tbody></table><p>未定义时，默认使用星辰效果。</p>',9);function Oe(Le,Fe){const r=d("CodeTabs"),i=d("font"),o=d("RouterLink"),l=d("ExternalLinkIcon");return _(),b("div",null,[y,n(r,{id:"43",data:[{title:"html"},{title:"ts"}],"tab-id":"Viewer"},{tab0:a(({title:c,value:h,isActive:u})=>[m]),tab1:a(({title:c,value:h,isActive:u})=>[g]),_:1}),x,e("h3",v,[k,t(" axes: "),n(i,{color:"gray"},{default:a(()=>[t("boolean")]),_:1})]),w,j,e("h3",P,[D,t(" axesLength:"),n(i,{color:"gray"},{default:a(()=>[t("number")]),_:1})]),V,B,e("h3",I,[N,t(" container : "),n(i,{color:"gray"},{default:a(()=>[t("Element")]),_:1})]),S,E,e("h3",A,[T,t(" entities:"),n(o,{to:"/APIdocs/entity/EntityGroup.html"},{default:a(()=>[t(" EntityGroup")]),_:1})]),C,e("h3",R,[z,t(" scene: "),n(o,{to:"/APIdocs/core/Scene.html"},{default:a(()=>[t("Scene")]),_:1})]),H,e("p",null,[t("指示是否使用浏览器的推荐分辨率的布尔值。 如果为true，则忽略浏览器的设备像素比，代之以1.0，有效地基于CSS像素而不是设备像素进行渲染。这可以提高具有高像素密度的低功能设备的性能。 当为false时，渲染将以设备像素为单位。无论这个布尔值是true还是false，"),e("a",O,[L,n(l)]),t("仍然有效。")]),F,e("p",null,[t("获取或设置此部件是否应控制渲染循环。 如果设置为true，部件将使用"),e("a",q,[G,n(l)]),t("来执行部件的渲染和调整大小，以及驱动仿真时钟。 如果设置为false，您必须手动调用"),M,t("， "),W,t("方法作为自定义渲染循环的一部分。 如果在渲染过程中出现错误，"),e("a",X,[Y,n(l)]),t("的"),Z,t("事件将被触发，该属性将被设置为false。 必须将其设置为true，以便在发生错误后继续渲染。")]),$,e("h3",J,[K,t(" drillPick(windowPosition,objects,recursive): "),n(i,{color:"gray"},{default:a(()=>[t("<Array>object")]),_:1})]),Q,e("table",null,[U,e("tbody",null,[e("tr",null,[ee,e("td",null,[n(o,{to:"/APIdocs/math/Vector2.html"},{default:a(()=>[t("Vector2")]),_:1})]),te]),e("tr",null,[ne,e("td",null,[t("<Array>"),n(o,{to:"/APIdocs/basic/Object3D.html"},{default:a(()=>[t("Object3D")]),_:1})]),ae]),e("tr",null,[oe,e("td",null,[n(i,{color:"gray"},{default:a(()=>[t("boolean")]),_:1})]),se])])]),ie,e("table",null,[le,e("tbody",null,[de,re,e("tr",null,[ce,e("td",he,[e("a",ue,[t("HeadingPitchRange"),n(l)])]),pe,_e]),be])]),fe,e("h3",ye,[me,t(" getPrimitiveByName(name): "),n(o,{to:"/APIdocs/basic/Object3D.html"},{default:a(()=>[t("Object3D")]),_:1})]),ge,e("h3",xe,[ve,t(" pick(windowPosition ,object,recursive): "),n(i,{color:"gray"},{default:a(()=>[t(": Array")]),_:1})]),ke,e("table",null,[we,e("tbody",null,[e("tr",null,[je,e("td",null,[n(o,{to:"/APIdocs/math/Vector2.html"},{default:a(()=>[t("Vector2")]),_:1})]),Pe]),e("tr",null,[De,e("td",null,[n(o,{to:"/APIdocs/basic/Object3D.html"},{default:a(()=>[t("Object3D")]),_:1})]),Ve]),e("tr",null,[Be,e("td",null,[n(i,{color:"gray"},{default:a(()=>[t("boolean")]),_:1})]),Ie])])]),Ne,e("h3",Se,[Ee,t(" pickPosition(windowPosition): "),n(o,{to:"/APIdocs/math/Vector3.html"},{default:a(()=>[t(" Vector3")]),_:1}),t("|"),n(i,{color:"gray"},{default:a(()=>[t("undefined")]),_:1})]),Ae,e("table",null,[Te,e("tbody",null,[e("tr",null,[Ce,e("td",Re,[n(o,{to:"/APIdocs/math/Vector2.html"},{default:a(()=>[t("Vector2")]),_:1})]),ze])])]),He])}const Ge=p(f,[["render",Oe],["__file","Viewer.html.vue"]]);export{Ge as default};
