import{_ as s,V as i,W as r,Y as t,Z as e,$ as o,X as n,D as a}from"./framework-34e2585c.js";const d={},c=t("h1",{id:"模型-modelgraphics",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#模型-modelgraphics","aria-hidden":"true"},"#"),e(" 模型(ModelGraphics)")],-1),p=t("p",null,"加载模型，目前支持glb,gltf格式。",-1),u=t("h2",{id:"构造器",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#构造器","aria-hidden":"true"},"#"),e(" 构造器")],-1),h=t("p",null,[t("strong",null,"ModelGraphics(options)")],-1),_=t("p",null,"options对象拥有以下属性：",-1),f=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Default"),t("th",{style:{"text-align":"left"}},"Description")])],-1),g=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"url"),e("🚩")]),t("td",{style:{"text-align":"left"}},"string"),t("td",{style:{"text-align":"left"}},[t("code",null,"true")]),t("td",{style:{"text-align":"left"}},"glTF资源路径。")],-1),y=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"show")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("指定显隐性。")])],-1),m=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"scale")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"1.0")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("放大比例。")])],-1),x=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"minimumPixelSize")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"0.0")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("一个数字属性，用于指定模型的最小像素大小，而不考虑缩放。")])],-1),C=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"maximumScale")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("模型最大比例尺大小. 在这个比例尺内模型模型大小缩放受minimumPixelSize限制，超过这个比例尺，不受minimumPixelSize限制")])],-1),w=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"incrementallyLoadTextures")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"true")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("设置在加载模型后纹理是否可以继续流入，默认是true，据说是在动态修改贴图的时候使用的。")])],-1),P=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"runAnimations")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"true")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("指定是否应该启动模型中指定的gltf动画。")])],-1),b=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"clampAnimations")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"true")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("指定glTF动画是否应在没有关键帧的持续时间内保持最后一个姿势。")])],-1),D=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"shadows")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"ShadowMode.ENABLED")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("枚举属性。从每个光源投射或接收阴影的模式。")])],-1),k=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"heightReference")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"HeightReference.NONE")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("相对于地形的位置。")])],-1),v=t("td",{style:{"text-align":"left"}},[t("code",null,"silhouetteColor")],-1),M=t("td",{style:{"text-align":"left"}},"Property",-1),B=t("td",{style:{"text-align":"left"}},[t("code",null,"Color.RED")],-1),T={style:{"text-align":"left"}},S=t("code",null,"optional",-1),G={href:"https://www.vvpstk.com/public/Cesium/Documentation/Color.html",target:"_blank",rel:"noopener noreferrer"},V=t("code",null,"Color",-1),E=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"silhouetteSize")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"0.0")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("边框大小（像素）。")])],-1),N=t("td",{style:{"text-align":"left"}},[t("code",null,"color")],-1),H=t("td",{style:{"text-align":"left"}},"Property",-1),L=t("td",{style:{"text-align":"left"}},[t("code",null,"Color.WHITE")],-1),R={style:{"text-align":"left"}},z=t("code",null,"optional",-1),A={href:"https://www.vvpstk.com/public/Cesium/Documentation/Color.html",target:"_blank",rel:"noopener noreferrer"},I=t("code",null,"Color",-1),F={href:"https://www.vvpstk.com/public/Cesium/Documentation/Color.html",target:"_blank",rel:"noopener noreferrer"},W=t("code",null,"Color",-1),Z=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"colorBlendMode")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"ColorBlendMode.HIGHLIGHT")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("一个枚举属性，指定颜色混合模式。")])],-1),O=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"colorBlendAmount")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"0.5")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("混合模式的强度值。当colorBlendMode为Cesium.ColorBlendMode.MIX时有效，范围0-1，0表示不和颜色混合，1则表示替换。")])],-1),X=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"imageBasedLightingFactor")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}},[t("code",null,"new Cartesian2(1.0, 1.0)")]),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("指定基于漫反射和镜面反射图像的照明的属性.")])],-1),Y=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"lightColor")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("指定光源颜色。默认为 "),t("code",null,"undefined"),e("。")])],-1),$=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"distanceDisplayCondition")]),t("td",{style:{"text-align":"left"}},"Property"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("指定在距相机某个距离内显示。")])],-1),j=t("td",{style:{"text-align":"left"}},[t("code",null,"nodeTransformations")],-1),q=t("td",{style:{"text-align":"left"}},"PropertyBag",-1),J=t("td",{style:{"text-align":"left"}},null,-1),K={style:{"text-align":"left"}},Q=t("code",null,"optional",-1),U={href:"https://www.vvpstk.com/public/Cesium/Documentation/TranslationRotationScale.html",target:"_blank",rel:"noopener noreferrer"},tt=t("code",null,"TranslationRotationScale",-1),et=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"articulations")]),t("td",{style:{"text-align":"left"}},"PropertyBag"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"optional"),e("模型关节（见CZML Model articulation 示例）它的键由关节名称，单个空格和阶段名称组成，值是数字属性。")])],-1),lt=t("td",{style:{"text-align":"left"}},[t("code",null,"clippingPlanes")],-1),ot=t("td",{style:{"text-align":"left"}},"Property",-1),nt=t("td",{style:{"text-align":"left"}},null,-1),st={style:{"text-align":"left"}},it=t("code",null,"optional",-1),rt={href:"https://www.vvpstk.com/public/Cesium/Documentation/ClippingPlaneCollection.html",target:"_blank",rel:"noopener noreferrer"},at=t("code",null,"ClippingPlaneCollection",-1),dt=n('<h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><p><strong><a href="">articulations : PropertyBag</a></strong></p><p>设置/获取模型关节。（见CZML Model articulation 示例）它的键由关节名称，单个空格和阶段名称组成，值是数字属性。</p><p><strong><a href="">clampAnimations : Property</a></strong></p><p>设置/获取指定glTF动画是否应在没有关键帧的持续时间内保持最后一个姿势。</p><p>Default Value: <code>true</code></p><p><strong><a href="">clippingPlanes : Property</a></strong></p>',7),ct={href:"https://www.vvpstk.com/public/Cesium/Documentation/ClippingPlaneCollection.html",target:"_blank",rel:"noopener noreferrer"},pt=t("code",null,"ClippingPlaneCollection",-1),ut=t("p",null,[t("strong",null,[t("a",{href:""},"color : Property")])],-1),ht={href:"https://www.vvpstk.com/public/Cesium/Documentation/Color.html",target:"_blank",rel:"noopener noreferrer"},_t=t("code",null,"Color",-1),ft=n('<p>Default Value: <code>Color.WHITE</code></p><p><strong><a href="">colorBlendAmount : Property</a></strong></p><p>设置/获取混合模式的强度值（0-1）。</p><p>Default Value: <code>0.5</code></p><p><strong><a href="">colorBlendMode : Property</a></strong></p><p>设置/获取颜色混合模式。</p><p>Default Value: <code>ColorBlendMode.HIGHLIGHT</code></p><p><code>readonly</code> <strong><a href="">definitionChanged : Event</a></strong></p><p>获取每当更改或修改属性或子属性时引发的事件。</p><p>distanceDisplayCondition : Property</p>',10),gt={href:"https://www.vvpstk.com/public/Cesium/Documentation/DistanceDisplayCondition.html",target:"_blank",rel:"noopener noreferrer"},yt=t("code",null,"DistanceDisplayCondition",-1),mt=t("p",null,"heightReference : Property",-1),xt={href:"https://www.vvpstk.com/public/Cesium/Documentation/HeightReference.html",target:"_blank",rel:"noopener noreferrer"},Ct=t("code",null,"HeightReference",-1),wt=t("p",null,[e("Default Value: "),t("code",null,"HeightReference.NONE")],-1),Pt=t("p",null,[t("strong",null,[t("a",{href:""},"imageBasedLightingFactor : Property")])],-1),bt={href:"https://www.vvpstk.com/public/Cesium/Documentation/Cartesian2.html",target:"_blank",rel:"noopener noreferrer"},Dt=t("code",null,"Cartesian2",-1),kt=t("p",null,[t("strong",null,[t("a",{href:""},"incrementallyLoadTextures : Property")])],-1),vt=t("p",null,"在加载模型后纹理是否可以继续流入，默认是true，据说是在动态修改贴图的时候使用的。",-1),Mt=t("p",null,[t("strong",null,[t("a",{href:""},"lightColor : Property")])],-1),Bt={href:"https://www.vvpstk.com/public/Cesium/Documentation/Cartesian3.html",target:"_blank",rel:"noopener noreferrer"},Tt=t("code",null,"Cartesian3",-1),St=t("p",null,[t("strong",null,[t("a",{href:""},"maximumScale : Property")])],-1),Gt={href:"https://www.vvpstk.com/public/Cesium/Documentation/ModelGraphics.html#minimumPixelSize",target:"_blank",rel:"noopener noreferrer"},Vt=t("code",null,"ModelGraphics#minimumPixelSize",-1),Et={href:"https://www.vvpstk.com/public/Cesium/Documentation/ModelGraphics.html#minimumPixelSize",target:"_blank",rel:"noopener noreferrer"},Nt=t("code",null,"ModelGraphics#minimumPixelSize",-1),Ht=t("p",null,[t("strong",null,[t("a",{href:""},"minimumPixelSize : Property")])],-1),Lt=t("p",null,"设置/获取 模型的最小像素大小，而不考虑缩放。",-1),Rt=t("p",null,[e("Default Value: "),t("code",null,"0.0")],-1),zt=t("p",null,[t("strong",null,[t("a",{href:""},"nodeTransformations : Property")])],-1),At={href:"https://www.vvpstk.com/public/Cesium/Documentation/PropertyBag.html",target:"_blank",rel:"noopener noreferrer"},It=t("code",null,"PropertyBag",-1),Ft={href:"https://www.vvpstk.com/public/Cesium/Documentation/TranslationRotationScale.html",target:"_blank",rel:"noopener noreferrer"},Wt=t("code",null,"TranslationRotationScale",-1),Zt=n('<p><strong><a href="">runAnimations : Property</a></strong></p><p>设置/获取指定是否应该启动模型中指定的gltf动画。</p><p>Default Value: <code>true</code></p><p><strong><a href="">scale : Property</a></strong></p><p>设置/获取放大比例。</p><p>Default Value: <code>1.0</code></p><p><strong><a href="">shadows : Property</a></strong></p><p>设置/获取 从每个光源投射或接收阴影的模式。</p><p>Default Value: <code>ShadowMode.ENABLED</code></p><p><strong><a href="">show : Property</a></strong></p><p>设置/获取显隐性。</p><p>Default Value: <code>true</code></p><p><strong><a href="">silhouetteColor : Property</a></strong></p>',13),Ot={href:"https://www.vvpstk.com/public/Cesium/Documentation/Color.html",target:"_blank",rel:"noopener noreferrer"},Xt=t("code",null,"Color",-1),Yt=n('<p>Default Value: <code>Color.RED</code></p><p><strong><a href="">silhouetteSize : Property</a></strong></p><p>设置/获取边框大小（像素）。</p><p>Default Value: <code>0.0</code></p><p><strong><a href="">uri : Property</a></strong></p><p>设置/获取模型路径。</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p><strong><a href="">clone(result): ModelGraphics</a></strong></p><p>复制实例。</p>',9),$t=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),jt=t("td",{style:{"text-align":"left"}},[t("code",null,"result")],-1),qt={style:{"text-align":"left"}},Jt={href:"https://www.vvpstk.com/public/Cesium/Documentation/ModelGraphics.html",target:"_blank",rel:"noopener noreferrer"},Kt=t("td",{style:{"text-align":"left"}},"optional用来存储结果的对象。",-1),Qt=t("p",null,"返回值: 修改后的结果参数或一个新实例（如果未提供）。",-1),Ut=t("p",null,[t("strong",null,[t("a",{href:""},"merge(source)")])],-1),te=t("p",null,"合并两个对象的属性，最终合并出的属性有以下特点： 就某个属性来说，如果A的属性已定义，则合并出的C的属性即为A的属性，反之C中将为B的属性。",-1),ee=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),le=t("td",{style:{"text-align":"left"}},[t("code",null,"source")],-1),oe={style:{"text-align":"left"}},ne={href:"https://www.vvpstk.com/public/Cesium/Documentation/ModelGraphics.html",target:"_blank",rel:"noopener noreferrer"},se=t("td",{style:{"text-align":"left"}},"要被合并到这个对象的对象。",-1);function ie(re,ae){const l=a("ExternalLinkIcon");return i(),r("div",null,[c,p,u,h,_,t("table",null,[f,t("tbody",null,[g,y,m,x,C,w,P,b,D,k,t("tr",null,[v,M,B,t("td",T,[S,e("指定的模型边框颜色 "),t("a",G,[V,o(l)])])]),E,t("tr",null,[N,H,L,t("td",R,[z,e("指定Color"),t("a",A,[I,o(l)]),e("与模型的渲染颜色混合的属性 "),t("a",F,[W,o(l)])])]),Z,O,X,Y,$,t("tr",null,[j,q,J,t("td",K,[Q,e("一个对象，其中的键是节点的名称，而值是 "),t("a",U,[tt,o(l)]),e(" 属性，描述了要应用于该节点的转换。 转换是在glTF中指定的节点现有转换之后应用的，并且不会替换节点现有转换。(轮胎转动就需要该属性。)")])]),et,t("tr",null,[lt,ot,nt,t("td",st,[it,e("指定 "),t("a",rt,[at,o(l)]),e(" 属性，用于有选择地禁用渲染模型。")])])])]),dt,t("p",null,[e("设置/获取"),t("a",ct,[pt,o(l)]),e(" 属性。用于有选择地禁用渲染模型。")]),ut,t("p",null,[e("设置/获取指定Color"),t("a",ht,[_t,o(l)]),e("与模型的渲染颜色混合的属性。")]),ft,t("p",null,[e("设置/获取显示条件"),t("a",gt,[yt,o(l)]),e(",即在距相机某个距离内显示。")]),mt,t("p",null,[e("设置/获取相对于地形的位置"),t("a",xt,[Ct,o(l)]),e("。")]),wt,Pt,t("p",null,[e("指定基于漫反射和镜面反射图像的照明的属性"),t("a",bt,[Dt,o(l)]),e(" 。")]),kt,vt,Mt,t("p",null,[e("指定光源颜色"),t("a",Bt,[Tt,o(l)]),e("。")]),St,t("p",null,[e("设置/获取模型最大比例尺大小. 在这个比例尺内模型模型大小缩放受"),t("a",Gt,[Vt,o(l)]),e("限制， 超过这个比例尺，不受"),t("a",Et,[Nt,o(l)]),e("限制. .")]),Ht,Lt,Rt,zt,t("p",null,[e("置要应用于此模型的节点转换集。这表示为 "),t("a",At,[It,o(l)]),e(" ，其中的键是节点的名称， 值是 "),t("a",Ft,[Wt,o(l)]),e(" 属性，用于描述要应用于该节点的转换。 转换是在glTF中指定的节点现有转换之后应用的，并且不会替换节点现有转换。")]),Zt,t("p",null,[e("设置/获取指定的模型边框颜色 "),t("a",Ot,[Xt,o(l)]),e("。")]),Yt,t("table",null,[$t,t("tbody",null,[t("tr",null,[jt,t("td",qt,[t("a",Jt,[e("ModelGraphics"),o(l)])]),Kt])])]),Qt,Ut,te,t("table",null,[ee,t("tbody",null,[t("tr",null,[le,t("td",oe,[t("a",ne,[e("ModelGraphics"),o(l)])]),se])])])])}const ce=s(d,[["render",ie],["__file","ModelGraphics.html.vue"]]);export{ce as default};
