import{_ as h,V as s,W as n,Y as t,Z as e,$ as r,X as o,D as i}from"./framework-34e2585c.js";const d={},c=o(`<h1 id="三维向量-vector3" tabindex="-1"><a class="header-anchor" href="#三维向量-vector3" aria-hidden="true">#</a> 三维向量（Vector3）</h1><p>该类表示的是一个三维向量（3D vector）。 一个三维向量表示的是一个有顺序的、三个为一组的数字组合（标记为x、y和z）， 可被用来表示很多事物，例如：</p><ul><li>一个位于三维空间中的点。</li><li>一个在三维空间中的方向与长度的定义。在three.js中，长度总是从(0, 0, 0)到(x, y, z)的 Euclidean distance（欧几里德距离，即直线距离）， 方向也是从(0, 0, 0)到(x, y, z)的方向。</li><li>任意的、有顺序的、三个为一组的数字组合。</li></ul><p>其他的一些事物也可以使用二维向量进行表示，比如说动量矢量等等； 但以上这些是它在three.js中的常用用途。</p><p>对 Vector3 实例进行遍历将按相应的顺序生成它的分量 (x, y, z)。</p><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector3</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//no arguments; will be initialised to (0, 0, 0) </span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector3</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> d <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">distanceTo</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h2><h3 id="vector3-x-float-y-float-z-float" tabindex="-1"><a class="header-anchor" href="#vector3-x-float-y-float-z-float" aria-hidden="true">#</a> Vector3( x : Float, y : Float, z : Float )</h3><p>x - 向量的x值，默认为<strong>0</strong>。 y - 向量的y值，默认为<strong>0</strong>。 z - 向量的z值，默认为<strong>0</strong>。</p><p>创建一个新的Vector3。</p><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><h3 id="isvector3-boolean" tabindex="-1"><a class="header-anchor" href="#isvector3-boolean" aria-hidden="true">#</a> .isVector3: Boolean</h3><p><code>readonly</code></p><p>判断是否是一个Vector3实例。</p><h3 id="x-float" tabindex="-1"><a class="header-anchor" href="#x-float" aria-hidden="true">#</a> .x : Float</h3><h3 id="y-float" tabindex="-1"><a class="header-anchor" href="#y-float" aria-hidden="true">#</a> .y : Float</h3><h3 id="z-float" tabindex="-1"><a class="header-anchor" href="#z-float" aria-hidden="true">#</a> .z : Float</h3><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><h3 id="add-v-vector3-this" tabindex="-1"><a class="header-anchor" href="#add-v-vector3-this" aria-hidden="true">#</a> add ( v : Vector3 ) : this</h3><p>将传入的向量v和这个向量相加。</p><h3 id="addscalar-s-float-this" tabindex="-1"><a class="header-anchor" href="#addscalar-s-float-this" aria-hidden="true">#</a> .addScalar ( s : Float ) : this</h3><p>将传入的标量s和这个向量的x值、y值以及z值相加。</p><h3 id="addscaledvector-v-vector3-s-float-this" tabindex="-1"><a class="header-anchor" href="#addscaledvector-v-vector3-s-float-this" aria-hidden="true">#</a> addScaledVector ( v : Vector3, s : Float ) : this</h3><p>将所传入的v与s相乘所得的乘积和这个向量相加。</p><h3 id="addvectors-a-vector3-b-vector3-this" tabindex="-1"><a class="header-anchor" href="#addvectors-a-vector3-b-vector3-this" aria-hidden="true">#</a> addVectors ( a : Vector3, b : Vector3 ) : this</h3><p>将该向量设置为a + b。</p><h3 id="applyaxisangle-axis-vector3-angle-float-this" tabindex="-1"><a class="header-anchor" href="#applyaxisangle-axis-vector3-angle-float-this" aria-hidden="true">#</a> applyAxisAngle( axis : Vector3, angle : Float ) : this</h3><p>axis - 一个被归一化的Vector3。 angle - 以弧度表示的角度。</p><p>将轴和角度所指定的旋转应用到该向量上。</p><h3 id="applyeuler-euler-euler-this" tabindex="-1"><a class="header-anchor" href="#applyeuler-euler-euler-this" aria-hidden="true">#</a> applyEuler( euler : Euler ) : this</h3><p>通过将Euler（欧拉）对象转换为Quaternion（四元数）并应用， 将欧拉变换应用到这一向量上。</p><h3 id="applymatrix3-m-matrix3-this" tabindex="-1"><a class="header-anchor" href="#applymatrix3-m-matrix3-this" aria-hidden="true">#</a> applyMatrix3 ( m : Matrix3 ) : this</h3><p>将该向量乘以三阶矩阵m。</p><h3 id="applymatrix4-m-matrix4-this" tabindex="-1"><a class="header-anchor" href="#applymatrix4-m-matrix4-this" aria-hidden="true">#</a> applyMatrix4 ( m : Matrix4 ) : this</h3><p>将该向量乘以四阶矩阵m（第四个维度隐式地为1），并按角度进行划分。</p><h3 id="applynormalmatrix-m-matrix3-this" tabindex="-1"><a class="header-anchor" href="#applynormalmatrix-m-matrix3-this" aria-hidden="true">#</a> applyNormalMatrix ( m : Matrix3 ) : this</h3><p>将该向量乘以正规矩阵 m，并将结果进行归一化。</p><h3 id="applyquaternion-quaternion-quaternion-this" tabindex="-1"><a class="header-anchor" href="#applyquaternion-quaternion-quaternion-this" aria-hidden="true">#</a> applyQuaternion ( quaternion : Quaternion ) : this</h3><p>将Quaternion变换应用到该向量。</p><h3 id="angleto-v-vector3-float" tabindex="-1"><a class="header-anchor" href="#angleto-v-vector3-float" aria-hidden="true">#</a> angleTo ( v : Vector3 ) : Float</h3><p>以弧度返回该向量与向量v之间的角度。</p><h3 id="ceil-this" tabindex="-1"><a class="header-anchor" href="#ceil-this" aria-hidden="true">#</a> ceil () : this</h3><p>将该向量x分量、 y分量以及z分量向上取整为最接近的整数。</p><h3 id="clamp-min-vector3-max-vector3-this" tabindex="-1"><a class="header-anchor" href="#clamp-min-vector3-max-vector3-this" aria-hidden="true">#</a> clamp) ( min : Vector3, max : Vector3 ) : this</h3><p>min - 在限制范围内，x值、y值和z的最小值。 max - 在限制范围内，x值、y值和z的最大值。</p><p>如果该向量的x值、y值或z值大于限制范围内最大x值、y值或z值，则该值将会被所对应的值取代。</p><p>如果该向量的x值、y值或z值小于限制范围内最小x值、y值或z值，则该值将会被所对应的值取代。</p><h3 id="clamplength-min-float-max-float-this" tabindex="-1"><a class="header-anchor" href="#clamplength-min-float-max-float-this" aria-hidden="true">#</a> clampLength ( min : Float, max : Float ) : this</h3><p>min - 长度将被限制为的最小值 max - 长度将被限制为的最大值</p><p>如果向量长度大于最大值，则它将会被最大值所取代。</p><p>如果向量长度小于最小值，则它将会被最小值所取代。</p><h3 id="clampscalar-min-float-max-float-this" tabindex="-1"><a class="header-anchor" href="#clampscalar-min-float-max-float-this" aria-hidden="true">#</a> clampScalar ( min : Float, max : Float ) : this</h3><p>min - 分量将被限制为的最小值 max - 分量将被限制为的最大值</p><p>如果该向量的x值、y值或z值大于最大值，则它们将被最大值所取代。</p><p>如果该向量的x值、y值或z值小于最小值，则它们将被最小值所取代。</p><h3 id="clone-vector3" tabindex="-1"><a class="header-anchor" href="#clone-vector3" aria-hidden="true">#</a> clone () : Vector3</h3><p>返回一个新的Vector3，其具有和当前这个向量相同的x、y和z。</p><h3 id="copy-v-vector3-this" tabindex="-1"><a class="header-anchor" href="#copy-v-vector3-this" aria-hidden="true">#</a> copy ( v : Vector3) : this</h3><p>将所传入Vector3的x、y和z属性复制给这一Vector3。</p><h3 id="cross-v-vector3-this" tabindex="-1"><a class="header-anchor" href="#cross-v-vector3-this" aria-hidden="true">#</a> cross ( v :[Vector3) ) : this</h3><p>将该向量设置为它本身与传入的v的叉积（cross product）。</p><h3 id="crossvectors-a-vector3-b-vector3-this" tabindex="-1"><a class="header-anchor" href="#crossvectors-a-vector3-b-vector3-this" aria-hidden="true">#</a> crossVectors ( a : Vector3, b : Vector3 ) : this</h3><p>将该向量设置为传入的a与b的叉积（cross product）。</p><h3 id="distanceto-v-vector3-float" tabindex="-1"><a class="header-anchor" href="#distanceto-v-vector3-float" aria-hidden="true">#</a> distanceTo( v : Vector3) : Float</h3><p>计算该向量到所传入的v间的距离。</p><h3 id="manhattandistanceto-v-vector3-float" tabindex="-1"><a class="header-anchor" href="#manhattandistanceto-v-vector3-float" aria-hidden="true">#</a> manhattanDistanceTo ( v : Vector3 ) : Float</h3><p>计算该向量到所传入的v之间的曼哈顿距离（Manhattan distance）。</p><h3 id="distancetosquared-v-vector3-float" tabindex="-1"><a class="header-anchor" href="#distancetosquared-v-vector3-float" aria-hidden="true">#</a> distanceToSquared ( v : Vector3 ) : Float</h3><p>计算该向量到传入的v的平方距离。 如果你只是将该距离和另一个距离进行比较，则应当比较的是距离的平方， 因为它的计算效率会更高一些。</p><h3 id="divide-v-vector3-this" tabindex="-1"><a class="header-anchor" href="#divide-v-vector3-this" aria-hidden="true">#</a> divide ( v : Vector3 ) : this</h3><p>将该向量除以向量v。</p><h3 id="dividescalar-s-float-this" tabindex="-1"><a class="header-anchor" href="#dividescalar-s-float-this" aria-hidden="true">#</a> divideScalar ( s : Float ) : this</h3><p>将该向量除以标量s。</p><h3 id="dot-v-vector3-float" tabindex="-1"><a class="header-anchor" href="#dot-v-vector3-float" aria-hidden="true">#</a> dot ( v : Vector3 ) : Float</h3>`,75),l={href:"https://en.wikipedia.org/wiki/Dot_product",target:"_blank",rel:"noopener noreferrer"},p=o('<h3 id="equals-v-vector3-boolean" tabindex="-1"><a class="header-anchor" href="#equals-v-vector3-boolean" aria-hidden="true">#</a> equals ( v : Vector3 ) : Boolean</h3><p>检查该向量和v的严格相等性。</p><h3 id="floor-this" tabindex="-1"><a class="header-anchor" href="#floor-this" aria-hidden="true">#</a> floor) () : this</h3><p>向量的分量向下取整为最接近的整数值。</p><h3 id="fromarray-array-array-offset-integer-this" tabindex="-1"><a class="header-anchor" href="#fromarray-array-array-offset-integer-this" aria-hidden="true">#</a> fromArray( array : Array, offset : Integer ) : this</h3><p>array - 来源矩阵。 offset - （可选）在数组中的元素偏移量，默认值为0。</p><p>设置向量中的x值为array[ offset + 0 ]，y值为array[ offset + 1 ]， z值为array[ offset + 2 ]。</p><h3 id="frombufferattribute-attribute-bufferattribute-index-integer-this" tabindex="-1"><a class="header-anchor" href="#frombufferattribute-attribute-bufferattribute-index-integer-this" aria-hidden="true">#</a> fromBufferAttribute ( attribute : BufferAttribute, index : Integer ) : this</h3><p>attribute - 来源的attribute。 index - 在attribute中的索引。</p><p>从attribute中设置向量的x值、y值和z值。</p><h3 id="getcomponent-index-integer-float" tabindex="-1"><a class="header-anchor" href="#getcomponent-index-integer-float" aria-hidden="true">#</a> getComponent ( index : Integer ) : Float</h3><p>index - 0, 1 or 2.</p><p>如果index值为0返回x值。 如果index值为1返回y值。 如果index值为2返回z值。</p><h3 id="length-float" tabindex="-1"><a class="header-anchor" href="#length-float" aria-hidden="true">#</a> length () : Float</h3>',14),f={href:"https://en.wikipedia.org/wiki/Euclidean_distance",target:"_blank",rel:"noopener noreferrer"},m=t("h3",{id:"manhattanlength-float",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#manhattanlength-float","aria-hidden":"true"},"#"),e(" .manhattanLength () : Float")],-1),x={href:"http://en.wikipedia.org/wiki/Taxicab_geometry",target:"_blank",rel:"noopener noreferrer"},_=t("h3",{id:"lengthsq-float",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#lengthsq-float","aria-hidden":"true"},"#"),e(" lengthSq () : Float")],-1),u={href:"https://en.wikipedia.org/wiki/Euclidean_distance",target:"_blank",rel:"noopener noreferrer"},b=o('<h3 id="lerp-v-vector3-alpha-float-this" tabindex="-1"><a class="header-anchor" href="#lerp-v-vector3-alpha-float-this" aria-hidden="true">#</a> lerp ( v : Vector3, alpha : Float ) : this</h3><p>v - 朝着进行插值的Vector3。 alpha - 插值因数，其范围通常在[0, 1]闭区间。</p><p>在该向量与传入的向量v之间的线性插值，alpha是沿着线的长度的百分比 —— alpha = 0 时表示的是当前向量，alpha = 1 时表示的是所传入的向量v。</p><h3 id="lerpvectors-v1-vector3-v2-vector3-alpha-float-this" tabindex="-1"><a class="header-anchor" href="#lerpvectors-v1-vector3-v2-vector3-alpha-float-this" aria-hidden="true">#</a> lerpVectors ( v1 : Vector3, v2 : Vector3, alpha : Float ) : this</h3><p>v1 - 起始的Vector3。 v2 - 朝着进行插值的Vector3。 alpha - 插值因数，其范围通常在[0, 1]闭区间。</p><p>将此向量设置为在v1和v2之间进行线性插值的向量， 其中alpha为两个向量之间连线的长度的百分比 —— alpha = 0 时表示的是v1，alpha = 1 时表示的是v2。</p><h3 id="max-v-vector3-this" tabindex="-1"><a class="header-anchor" href="#max-v-vector3-this" aria-hidden="true">#</a> max ( v : Vector3 ) : this</h3><p>如果该向量的x值、y值或z值小于所传入v的x值、y值或z值， 则将该值替换为对应的最大值。</p><h3 id="min-v-vector3-this" tabindex="-1"><a class="header-anchor" href="#min-v-vector3-this" aria-hidden="true">#</a> min ( v : Vector3 ) : this</h3><p>如果该向量的x值、y值或z值大于所传入v的x值、y值或z值， 则将该值替换为对应的最小值。</p><h3 id="multiply-v-vector3-this" tabindex="-1"><a class="header-anchor" href="#multiply-v-vector3-this" aria-hidden="true">#</a> multiply ( v : Vector3 ) : this</h3><p>将该向量与所传入的向量v进行相乘。</p><h3 id="multiplyscalar-s-float-this" tabindex="-1"><a class="header-anchor" href="#multiplyscalar-s-float-this" aria-hidden="true">#</a> multiplyScalar ( s : Float ) : this</h3><p>将该向量与所传入的标量s进行相乘。</p><h3 id="multiplyvectors-a-vector3-b-vector3-this" tabindex="-1"><a class="header-anchor" href="#multiplyvectors-a-vector3-b-vector3-this" aria-hidden="true">#</a> multiplyVectors ( a : Vector3, b : Vector3 ) : this</h3><p>按照分量顺序，将该向量设置为和a* b相等。</p><h3 id="negate-this" tabindex="-1"><a class="header-anchor" href="#negate-this" aria-hidden="true">#</a> negate () : this</h3><p>向量取反，即： x = -x, y = -y , z = -z。</p><h3 id="normalize-this" tabindex="-1"><a class="header-anchor" href="#normalize-this" aria-hidden="true">#</a> normalize() : this</h3><p>将该向量转换为单位向量（unit vector）， 也就是说，将该向量的方向设置为和原向量相同，但是其长度（length）为1。</p><h3 id="project-camera-camera-this" tabindex="-1"><a class="header-anchor" href="#project-camera-camera-this" aria-hidden="true">#</a> project ( camera : Camera ) : this</h3><p>camera — 在投影中使用的摄像机。</p><p>将此向量(坐标)从世界空间投影到相机的标准化设备坐标 (NDC) 空间。</p><h3 id="projectonplane-planenormal-vector3-this" tabindex="-1"><a class="header-anchor" href="#projectonplane-planenormal-vector3-this" aria-hidden="true">#</a> projectOnPlane ( planeNormal : Vector3 ) : this</h3><p>planeNormal - 表示平面法线的向量</p><p>Projects 通过从该向量减去投影到平面法线上的向量，将该向量投影到平面上。</p><h3 id="projectonvector-v-vector3-this" tabindex="-1"><a class="header-anchor" href="#projectonvector-v-vector3-this" aria-hidden="true">#</a> projectOnVector ( v : Vector3 ) : this</h3><p>投影（Projects）该向量到向量v上。</p><h3 id="reflect-normal-vector3-this" tabindex="-1"><a class="header-anchor" href="#reflect-normal-vector3-this" aria-hidden="true">#</a> reflect ( normal : Vector3 ) : this</h3><p>normal - 反射面法线</p><p>将该向量设置为对指定 normal 法线的表面的反射向量。假设法线具有单位长度。</p><h3 id="round-this" tabindex="-1"><a class="header-anchor" href="#round-this" aria-hidden="true">#</a> round () : this</h3><p>向量中的分量四舍五入取整为最接近的整数值。</p><h3 id="roundtozero-this" tabindex="-1"><a class="header-anchor" href="#roundtozero-this" aria-hidden="true">#</a> roundToZero () : this</h3><p>向量中的分量朝向0取整数（若分量为负数则向上取整，若为正数则向下取整）。</p><h3 id="set-x-float-y-float-z-float-this" tabindex="-1"><a class="header-anchor" href="#set-x-float-y-float-z-float-this" aria-hidden="true">#</a> set ( x : Float, y : Float, z : Float ) : this</h3><p>设置该向量的x、y 和 z 分量。</p><h3 id="setcomponent-index-integer-value-float-this" tabindex="-1"><a class="header-anchor" href="#setcomponent-index-integer-value-float-this" aria-hidden="true">#</a> setComponent ( index : Integer, value : Float ) : this</h3><p>index - 0、1 或 2。 value - Float</p><p>若index为 0 则设置 x值为 value。 若index为 1 则设置 y 值为 value。 若index为 2 则设置 z 值为 value。</p><h3 id="setfromcylindrical-c-cylindrical-this" tabindex="-1"><a class="header-anchor" href="#setfromcylindrical-c-cylindrical-this" aria-hidden="true">#</a> setFromCylindrical ( c : Cylindrical ) : this</h3><p>从圆柱坐标c中设置该向量。</p><h3 id="setfromcylindricalcoords-radius-float-theta-float-y-float-this" tabindex="-1"><a class="header-anchor" href="#setfromcylindricalcoords-radius-float-theta-float-y-float-this" aria-hidden="true">#</a> setFromCylindricalCoords ( radius : Float, theta : Float, y : Float ) : this</h3><p>从圆柱坐标中的radius、theta和y设置该向量。</p><h3 id="setfromeuler-euler-euler-this" tabindex="-1"><a class="header-anchor" href="#setfromeuler-euler-euler-this" aria-hidden="true">#</a> setFromEuler ( euler : Euler ) : this</h3><p>根据指定的Euler Angle的x、y、z分量来设置该向量的x、y、z分量。</p>',46),g={id:"setfrommatrixcolumn-matrix-matrix4-index-integer-this",tabindex:"-1"},v=t("a",{class:"header-anchor",href:"#setfrommatrixcolumn-matrix-matrix4-index-integer-this","aria-hidden":"true"},"#",-1),y={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setFromMatrixColumn",target:"_blank",rel:"noopener noreferrer"},z={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix4",target:"_blank",rel:"noopener noreferrer"},k={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix4",target:"_blank",rel:"noopener noreferrer"},V={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.x",target:"_blank",rel:"noopener noreferrer"},j={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.y",target:"_blank",rel:"noopener noreferrer"},F={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.z",target:"_blank",rel:"noopener noreferrer"},M={id:"setfrommatrix3column-matrix-matrix3-index-integer-this",tabindex:"-1"},S=t("a",{class:"header-anchor",href:"#setfrommatrix3column-matrix-matrix3-index-integer-this","aria-hidden":"true"},"#",-1),w={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setFromMatrix3Column",target:"_blank",rel:"noopener noreferrer"},C={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix3",target:"_blank",rel:"noopener noreferrer"},E={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix3",target:"_blank",rel:"noopener noreferrer"},q={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.x",target:"_blank",rel:"noopener noreferrer"},T={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.y",target:"_blank",rel:"noopener noreferrer"},A={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.z",target:"_blank",rel:"noopener noreferrer"},I={id:"setfrommatrixposition-m-matrix4-this",tabindex:"-1"},N=t("a",{class:"header-anchor",href:"#setfrommatrixposition-m-matrix4-this","aria-hidden":"true"},"#",-1),D={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setFromMatrixPosition",target:"_blank",rel:"noopener noreferrer"},B={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix4",target:"_blank",rel:"noopener noreferrer"},L={href:"https://en.wikipedia.org/wiki/Transformation_matrix",target:"_blank",rel:"noopener noreferrer"},P={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix4",target:"_blank",rel:"noopener noreferrer"},Q={id:"setfrommatrixscale-m-matrix4-this",tabindex:"-1"},Z=t("a",{class:"header-anchor",href:"#setfrommatrixscale-m-matrix4-this","aria-hidden":"true"},"#",-1),X={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setFromMatrixScale",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix4",target:"_blank",rel:"noopener noreferrer"},H={href:"https://en.wikipedia.org/wiki/Transformation_matrix",target:"_blank",rel:"noopener noreferrer"},O={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix4",target:"_blank",rel:"noopener noreferrer"},R={id:"setfromspherical-s-spherical-this",tabindex:"-1"},W=t("a",{class:"header-anchor",href:"#setfromspherical-s-spherical-this","aria-hidden":"true"},"#",-1),$={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setFromSpherical",target:"_blank",rel:"noopener noreferrer"},G={href:"https://threejs.org/docs/index.html#api/zh/math/Spherical",target:"_blank",rel:"noopener noreferrer"},J={href:"https://threejs.org/docs/index.html#api/zh/math/Spherical",target:"_blank",rel:"noopener noreferrer"},K={id:"setfromsphericalcoords-radius-float-phi-float-theta-float-this",tabindex:"-1"},U=t("a",{class:"header-anchor",href:"#setfromsphericalcoords-radius-float-phi-float-theta-float-this","aria-hidden":"true"},"#",-1),ee={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setFromSphericalCoords",target:"_blank",rel:"noopener noreferrer"},te={href:"https://threejs.org/docs/index.html#api/zh/math/Spherical",target:"_blank",rel:"noopener noreferrer"},ae={href:"https://threejs.org/docs/index.html#api/zh/math/Spherical",target:"_blank",rel:"noopener noreferrer"},re={href:"https://threejs.org/docs/index.html#api/zh/math/Spherical",target:"_blank",rel:"noopener noreferrer"},oe={id:"setlength-l-float-this",tabindex:"-1"},he=t("a",{class:"header-anchor",href:"#setlength-l-float-this","aria-hidden":"true"},"#",-1),se={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setLength",target:"_blank",rel:"noopener noreferrer"},ne={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.length",target:"_blank",rel:"noopener noreferrer"},ie={id:"setscalar-scalar-float-this",tabindex:"-1"},de=t("a",{class:"header-anchor",href:"#setscalar-scalar-float-this","aria-hidden":"true"},"#",-1),ce={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setScalar",target:"_blank",rel:"noopener noreferrer"},le={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.x",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.y",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.z",target:"_blank",rel:"noopener noreferrer"},me={id:"setx-x-float-this",tabindex:"-1"},xe=t("a",{class:"header-anchor",href:"#setx-x-float-this","aria-hidden":"true"},"#",-1),_e={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setX",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.x",target:"_blank",rel:"noopener noreferrer"},be={id:"sety-y-float-this",tabindex:"-1"},ge=t("a",{class:"header-anchor",href:"#sety-y-float-this","aria-hidden":"true"},"#",-1),ve={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setY",target:"_blank",rel:"noopener noreferrer"},ye={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.y",target:"_blank",rel:"noopener noreferrer"},ze={id:"setz-z-float-this",tabindex:"-1"},ke=t("a",{class:"header-anchor",href:"#setz-z-float-this","aria-hidden":"true"},"#",-1),Ve={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.setZ",target:"_blank",rel:"noopener noreferrer"},je={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.z",target:"_blank",rel:"noopener noreferrer"},Fe={id:"sub-v-vector3-this",tabindex:"-1"},Me=t("a",{class:"header-anchor",href:"#sub-v-vector3-this","aria-hidden":"true"},"#",-1),Se={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.sub",target:"_blank",rel:"noopener noreferrer"},we={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3",target:"_blank",rel:"noopener noreferrer"},Ce={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3",target:"_blank",rel:"noopener noreferrer"},Ee={id:"subscalar-s-float-this",tabindex:"-1"},qe=t("a",{class:"header-anchor",href:"#subscalar-s-float-this","aria-hidden":"true"},"#",-1),Te={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.subScalar",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.x",target:"_blank",rel:"noopener noreferrer"},Ie={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.y",target:"_blank",rel:"noopener noreferrer"},Ne={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.z",target:"_blank",rel:"noopener noreferrer"},De={id:"subvectors-a-vector3-b-vector3-this",tabindex:"-1"},Be=t("a",{class:"header-anchor",href:"#subvectors-a-vector3-b-vector3-this","aria-hidden":"true"},"#",-1),Le={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.subVectors",target:"_blank",rel:"noopener noreferrer"},Pe={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3",target:"_blank",rel:"noopener noreferrer"},Qe={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3",target:"_blank",rel:"noopener noreferrer"},Ze={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3",target:"_blank",rel:"noopener noreferrer"},Xe={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3",target:"_blank",rel:"noopener noreferrer"},Ye={id:"toarray-array-array-offset-integer-array",tabindex:"-1"},He=t("a",{class:"header-anchor",href:"#toarray-array-array-offset-integer-array","aria-hidden":"true"},"#",-1),Oe={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.toArray",target:"_blank",rel:"noopener noreferrer"},Re=t("p",null,"array - （可选）被用于存储向量的数组。如果这个值没有传入，则将创建一个新的数组。 offset - （可选） 数组中元素的偏移量。",-1),We=t("p",null,"返回一个数组[x, y ,z]，或者将x、y和z复制到所传入的array中。",-1),$e={id:"transformdirection-m-matrix4-this",tabindex:"-1"},Ge=t("a",{class:"header-anchor",href:"#transformdirection-m-matrix4-this","aria-hidden":"true"},"#",-1),Je={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.transformDirection",target:"_blank",rel:"noopener noreferrer"},Ke={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix4",target:"_blank",rel:"noopener noreferrer"},Ue={href:"https://threejs.org/docs/index.html#api/zh/math/Matrix4",target:"_blank",rel:"noopener noreferrer"},et={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.normalize",target:"_blank",rel:"noopener noreferrer"},tt={id:"unproject-camera-camera-this",tabindex:"-1"},at=t("a",{class:"header-anchor",href:"#unproject-camera-camera-this","aria-hidden":"true"},"#",-1),rt={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.unproject",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://threejs.org/docs/index.html#api/zh/cameras/Camera",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://threejs.org/docs/index.html#api/zh/cameras/Camera",target:"_blank",rel:"noopener noreferrer"},st=t("p",null,"将此向量(坐标)从相机的标准化设备坐标 (NDC) 空间投影到世界空间。",-1),nt={id:"random-this",tabindex:"-1"},it=t("a",{class:"header-anchor",href:"#random-this","aria-hidden":"true"},"#",-1),dt={href:"https://threejs.org/docs/index.html#api/zh/math/Vector3.random",target:"_blank",rel:"noopener noreferrer"},ct=t("p",null,"将该向量的每个分量(x、y、z)设置为介于 0 和 1 之间的伪随机数，不包括 1。",-1);function lt(pt,ft){const a=i("ExternalLinkIcon");return s(),n("div",null,[c,t("p",null,[e("计算该vector和所传入v的点积（"),t("a",l,[e("dot product"),r(a)]),e("）。")]),p,t("p",null,[e("计算从(0, 0, 0) 到 (x, y, z)的欧几里得长度 （"),t("a",f,[e("Euclidean length"),r(a)]),e("，即直线长度）")]),m,t("p",null,[e("计算该向量的曼哈顿长度（"),t("a",x,[e("Manhattan length"),r(a)]),e("）。")]),_,t("p",null,[e("计算从(0, 0, 0)到(x, y, z)的欧几里得长度 （"),t("a",u,[e("Euclidean length"),r(a)]),e("，即直线长度）的平方。 如果你正在比较向量的长度，应当比较的是长度的平方，因为它的计算效率更高一些。")]),b,t("h3",g,[v,e(" ."),t("a",y,[e("setFromMatrixColumn"),r(a)]),e(" ( matrix : "),t("a",z,[e("Matrix4"),r(a)]),e(", index : Integer ) : this")]),t("p",null,[e("从传入的四阶矩阵"),t("a",k,[e("matrix"),r(a)]),e("由index指定的列中， 设置该向量的"),t("a",V,[e("x"),r(a)]),e("值、"),t("a",j,[e("y"),r(a)]),e("值和"),t("a",F,[e("z"),r(a)]),e("值。")]),t("h3",M,[S,e(" ."),t("a",w,[e("setFromMatrix3Column"),r(a)]),e(" ( matrix : "),t("a",C,[e("Matrix3"),r(a)]),e(", index : Integer ) : this")]),t("p",null,[e("从传入的三阶矩阵 "),t("a",E,[e("matrix"),r(a)]),e(" 由 index 指定的列中，设置该向量的 "),t("a",q,[e("x"),r(a)]),e(" 值、"),t("a",T,[e("y"),r(a)]),e(" 值和 "),t("a",A,[e("z"),r(a)]),e(" 值。")]),t("h3",I,[N,e(" ."),t("a",D,[e("setFromMatrixPosition"),r(a)]),e(" ( m : "),t("a",B,[e("Matrix4"),r(a)]),e(" ) : this")]),t("p",null,[e("从变换矩阵（"),t("a",L,[e("transformation matrix"),r(a)]),e("）"),t("a",P,[e("m"),r(a)]),e("中， 设置该向量为其中与位置相关的元素。")]),t("h3",Q,[Z,e(" ."),t("a",X,[e("setFromMatrixScale"),r(a)]),e(" ( m : "),t("a",Y,[e("Matrix4"),r(a)]),e(" ) : this")]),t("p",null,[e("从变换矩阵（"),t("a",H,[e("transformation matrix"),r(a)]),e("）"),t("a",O,[e("m"),r(a)]),e("中， 设置该向量为其中与缩放相关的元素。")]),t("h3",R,[W,e(" ."),t("a",$,[e("setFromSpherical"),r(a)]),e(" ( s : "),t("a",G,[e("Spherical"),r(a)]),e(" ) : this")]),t("p",null,[e("从球坐标"),t("a",J,[e("s"),r(a)]),e("中设置该向量。")]),t("h3",K,[U,e(" ."),t("a",ee,[e("setFromSphericalCoords"),r(a)]),e(" ( radius : Float, phi : Float, theta : Float ) : this")]),t("p",null,[e("从球坐标中的"),t("a",te,[e("radius"),r(a)]),e("、"),t("a",ae,[e("phi"),r(a)]),e("和"),t("a",re,[e("theta"),r(a)]),e("设置该向量。")]),t("h3",oe,[he,e(" ."),t("a",se,[e("setLength"),r(a)]),e(" ( l : Float ) : this")]),t("p",null,[e("将该向量的方向设置为和原向量相同，但是长度（"),t("a",ne,[e("length"),r(a)]),e("）为l。")]),t("h3",ie,[de,e(" ."),t("a",ce,[e("setScalar"),r(a)]),e(" ( scalar : Float ) : this")]),t("p",null,[e("将该向量的"),t("a",le,[e("x"),r(a)]),e("、"),t("a",pe,[e("y"),r(a)]),e("和"),t("a",fe,[e("z"),r(a)]),e("值同时设置为等于传入的scalar。")]),t("h3",me,[xe,e(" ."),t("a",_e,[e("setX"),r(a)]),e(" ( x : Float ) : this")]),t("p",null,[e("将向量中的"),t("a",ue,[e("x"),r(a)]),e("值替换为x。")]),t("h3",be,[ge,e(" ."),t("a",ve,[e("setY"),r(a)]),e(" ( y : Float ) : this")]),t("p",null,[e("将向量中的"),t("a",ye,[e("y"),r(a)]),e("值替换为y。")]),t("h3",ze,[ke,e(" ."),t("a",Ve,[e("setZ"),r(a)]),e(" ( z : Float ) : this")]),t("p",null,[e("将向量中的"),t("a",je,[e("z"),r(a)]),e("值替换为z。")]),t("h3",Fe,[Me,e(" ."),t("a",Se,[e("sub"),r(a)]),e(" ( v : "),t("a",we,[e("Vector3"),r(a)]),e(" ) : this")]),t("p",null,[e("从该向量减去向量"),t("a",Ce,[e("v"),r(a)]),e("。")]),t("h3",Ee,[qe,e(" ."),t("a",Te,[e("subScalar"),r(a)]),e(" ( s : Float ) : this")]),t("p",null,[e("从该向量的"),t("a",Ae,[e("x"),r(a)]),e("、"),t("a",Ie,[e("y"),r(a)]),e("和"),t("a",Ne,[e("z"),r(a)]),e("中减去标量s。")]),t("h3",De,[Be,e(" ."),t("a",Le,[e("subVectors"),r(a)]),e(" ( a : "),t("a",Pe,[e("Vector3"),r(a)]),e(", b : "),t("a",Qe,[e("Vector3"),r(a)]),e(" ) : this")]),t("p",null,[e("将该向量设置为"),t("a",Ze,[e("a"),r(a)]),e(" - "),t("a",Xe,[e("b"),r(a)]),e("。")]),t("h3",Ye,[He,e(" ."),t("a",Oe,[e("toArray"),r(a)]),e(" ( array : Array, offset : Integer ) : Array")]),Re,We,t("h3",$e,[Ge,e(" ."),t("a",Je,[e("transformDirection"),r(a)]),e(" ( m : "),t("a",Ke,[e("Matrix4"),r(a)]),e(" ) : this")]),t("p",null,[e("通过传入的矩阵（"),t("a",Ue,[e("m"),r(a)]),e("的左上角3 x 3子矩阵）变换向量的方向， 并将结果进行"),t("a",et,[e("normalizes"),r(a)]),e("（归一化）。")]),t("h3",tt,[at,e(" ."),t("a",rt,[e("unproject"),r(a)]),e(" ( camera : "),t("a",ot,[e("Camera"),r(a)]),e(" ) : this")]),t("p",null,[t("a",ht,[e("camera"),r(a)]),e(" — 在投影中使用的摄像机。")]),st,t("h3",nt,[it,e(" ."),t("a",dt,[e("random"),r(a)]),e(" () : this")]),ct])}const xt=h(d,[["render",lt],["__file","Vector3.html.vue"]]);export{xt as default};
